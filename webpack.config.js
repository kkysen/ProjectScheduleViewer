const path = require("path");
const HtmlWebpackPlugin = require("html-webpack-plugin");
const UglifyJSPlugin = require("uglifyjs-webpack-plugin");
const WebpackCleanupPlugin = require("webpack-cleanup-plugin");
const CompressionWebpackPlugin = require("compression-webpack-plugin");
const {BundleAnalyzerPlugin} = require("webpack-bundle-analyzer");

const production = true;
const mode = production ? "production" : "development";

const htmlPlugin = function(name, chunks) {
    return new HtmlWebpackPlugin({
        inject: true,
        chunks: chunks || undefined,
        filename: `${name}.html`,
        template: `./src/html/${name}.html`,
        hash: false,
        cache: true,
        // favicon: "./src/img/favicon.ico",
        showErrors: !production,
        minify: production && {
            caseSensitive: false,
            collapseBooleanAttributes: true,
            collapseInlineTagWhitespace: true,
            collapseWhitespace: true,
            conservativeCollapse: false,
            customAttrAssign: [],
            // customAttrCollapse: undefined,
            customAttrSurround: [],
            // customEventAttributes: [],
            decodeEntities: true,
            html5: true,
            ignoreCustomComments: [],
            ignoreCustomFragments: [],
            includeAutoGeneratedTags: true,
            keepClosingSlash: false,
            maxLineLength: Number.MAX_SAFE_INTEGER,
            minifyCSS: true,
            minifyJS: true,
            minifyURLs: true,
            preserveLineBreaks: false,
            preventAttributesEscaping: false,
            processConditionalComments: true,
            processScripts: [],
            quoteCharacter: "\"",
            removeAttributeQuotes: true,
            removeComments: true,
            removeEmptyAttributes: true,
            removeEmptyElements: false,
            removeOptionalTags: true,
            removeRedundantAttributes: true,
            removeScriptTypeAttributes: true,
            removeStyleLinkTypeAttributes: true,
            removeTagWhitespace: false,
            sortAttributes: true,
            sortClassName: true,
            trimCustomFragments: true,
            useShortDoctype: true,
        },
    });
};

const htmlPlugins = function(args) {
    return Object.entries(args).map(([name, chunks]) => htmlPlugin(name, chunks));
};

const uglifyOptions = {
    ecma: 6,
    comments: false,
    compress: {
        arrows: true, // untyped
        // arguments: true,
        booleans: true,
        collapse_vars: true,
        comparisons: true,
        computed_props: true, // untyped
        conditionals: true,
        dead_code: true,
        drop_console: false,
        drop_debugger: true,
        evaluate: true,
        expression: false,
        global_defs: {},
        hoist_funs: false,
        hoist_props: true,
        hoist_vars: false,
        if_return: true,
        inline: true,
        join_vars: true,
        keep_classnames: false, // untyped
        keep_fargs: false,
        keep_fnames: false,
        keep_infinity: false,
        loops: true,
        negate_iife: true,
        passes: 3,
        properties: true,
        pure_funcs: [],
        pure_getters: "strict",
        reduce_funcs: true,
        reduce_vars: true,
        sequences: true,
        side_effects: true,
        switches: true,
        toplevel: true, // check
        top_retain: [],
        typeofs: true,
        // unsafe: true,
        unsafe_arrows: true, // untyped
        unsafe_comps: true,
        unsafe_Function: true,
        unsafe_math: true,
        unsafe_methods: true, // untyped
        unsafe_proto: true,
        unsafe_regexp: true,
        unsafe_undefined: true,
        unused: true,
        warnings: false,
    },
    keep_fnames: false,
    mangle: {
        eval: true,
        keep_classnames: false, // untyped
        keep_fnames: false,
        reserved: [],
        toplevel: true,
        safari10: false, // untyped
        properties: false && {
            builtins: false,
            debug: false,
            keep_quoted: false,
            regex: null,
            reserved: [...["constructor"], ...require("uglify-es/tools/domprops")],
        },
    },
    sourceMap: true,
};

const dir = "./src/ts/ProjectScheduleViewer/";

module.exports = {
    // target: "web",
    node: {
        fs: "empty",
        net: "empty",
    },
    entry: {
        client: dir + "client/client.ts",
        server: dir + "server/server.ts",
        // test: dir + "server/test/test.ts",
    },
    output: {
        filename: "[name].[chunkhash].js",
        path: path.resolve(__dirname, "dist"),
    },
    resolve: {
        extensions: [".ts", ".tsx", ".js"],
    },
    module: {
        rules: [
            {
                test: /\.tsx?$/,
                loader: "ts-loader",
            },
        ],
    },
    cache: true,
    optimization: {
        splitChunks: {
            chunks: "all",
        },
        minimize: production,
        minimizer: [
            new UglifyJSPlugin({
                uglifyOptions,
            }),
        ],
    },
    plugins: [
        ...htmlPlugins({
            ProjectScheduleViewer: ["client"],
        }),
        new WebpackCleanupPlugin(),
        new CompressionWebpackPlugin({
            asset: "[path].gz[query]",
            algorithm: "gzip",
            test: /\.js$|\.css$|\.html$/,
            threshold: 10240,
            minRatio: 0.8,
        }),
        // new BundleAnalyzerPlugin(),
    ],
    mode: mode,
};